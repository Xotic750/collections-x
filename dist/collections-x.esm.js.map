{"version":3,"sources":["../src/collections-x.js"],"names":[],"mappings":"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","file":"collections-x.esm.js","sourcesContent":["import hasOwn from 'has-own-property-x';\nimport isFunction from 'is-function-x';\nimport defineProperty from 'object-define-property-x';\nimport defineProperties from 'object-define-properties-x';\nimport isString from 'is-string';\nimport isArrayLike from 'is-array-like-x';\nimport isPrimitive from 'is-primitive';\nimport isSurrogatePair from 'is-surrogate-pair-x';\nimport indexOf from 'index-of-x';\nimport assertIsFunction from 'assert-is-function-x';\nimport assertIsObject from 'assert-is-object-x';\nimport IdGenerator from 'big-counter-x';\nimport isNil from 'is-nil-x';\nimport $isMap from 'is-map-x';\nimport $isSet from 'is-set-x';\nimport isObjectLike from 'is-object-like-x';\nimport isArray from 'is-array-x';\nimport isBoolean from 'is-boolean-object';\nimport some from 'array-some-x';\nimport getPrototypeOf from 'get-prototype-of-x';\nimport hasSymbolSupport from 'has-symbol-support-x';\nimport create from 'object-create-x';\nimport toBoolean from 'to-boolean-x';\n\nconst {setPrototypeOf} = {}.constructor;\n/* eslint-disable-next-line compat/compat */\nconst hasRealSymbolIterator = hasSymbolSupport && typeof Symbol.iterator === 'symbol';\n/* eslint-disable-next-line compat/compat */\nconst hasFakeSymbolIterator = typeof Symbol === 'object' && typeof Symbol.iterator === 'string';\n/**\n * The iterator identifier that is in use.\n *\n * Type {Symbol|string}.\n */\nlet $symIt;\n\nif (hasRealSymbolIterator || hasFakeSymbolIterator) {\n  /* eslint-disable-next-line compat/compat */\n  $symIt = Symbol.iterator;\n  /* eslint-disable-next-line no-use-extend-native/no-use-extend-native */\n} else if (isFunction([]['_es6-shim iterator_'])) {\n  $symIt = '_es6-shim iterator_';\n} else {\n  $symIt = '@@iterator';\n}\n\nexport const symIt = $symIt;\n\nconst isNumberType = function isNumberType(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Detect an iterator function.\n *\n * @private\n * @param {*} iterable - Value to detect iterator function.\n * @returns {Symbol|string|undefined} The iterator property identifier.\n */\nconst getSymbolIterator = function getSymbolIterator(iterable) {\n  if (isNil(iterable) === false) {\n    if ((hasRealSymbolIterator || hasFakeSymbolIterator) && iterable[$symIt]) {\n      return $symIt;\n    }\n\n    if (iterable['_es6-shim iterator_']) {\n      return '_es6-shim iterator_';\n    }\n\n    if (iterable['@@iterator']) {\n      return '@@iterator';\n    }\n  }\n\n  /* eslint-disable-next-line no-void */\n  return void 0;\n};\n\n/**\n * If an iterable object is passed, all of its elements will be added to the\n * new Map/Set, null is treated as undefined.\n *\n * @private\n * @param {string} kind - Either 'map' or 'set'.\n * @param {object} context - The Map/Set object.\n * @param {*} iterable - Value to parsed.\n */\nconst parseIterable = function parseIterable(kind, context, iterable) {\n  const symbolIterator = getSymbolIterator(iterable);\n\n  if (kind === 'map') {\n    defineProperty(context, '[[value]]', {\n      value: [],\n    });\n  }\n\n  defineProperties(context, {\n    '[[changed]]': {\n      value: false,\n    },\n    '[[id]]': {\n      value: new IdGenerator(),\n    },\n    '[[key]]': {\n      value: [],\n    },\n    '[[order]]': {\n      value: [],\n    },\n  });\n\n  let next;\n  let key;\n  let indexof;\n\n  if (iterable && isFunction(iterable[symbolIterator])) {\n    const iterator = iterable[symbolIterator]();\n    next = iterator.next();\n\n    if (kind === 'map') {\n      if (isArrayLike(next.value) === false || next.value.length < 2) {\n        throw new TypeError(`Iterator value ${isArrayLike(next.value)} is not an entry object`);\n      }\n    }\n\n    while (next.done === false) {\n      key = kind === 'map' ? next.value[0] : next.value;\n      indexof = indexOf(assertIsObject(context)['[[key]]'], key, 'SameValueZero');\n\n      if (indexof < 0) {\n        if (kind === 'map') {\n          context['[[value]]'].push(next.value[1]);\n        }\n\n        context['[[key]]'].push(key);\n        context['[[order]]'].push(context['[[id]]'].get());\n        context['[[id]]'].next();\n      } else if (kind === 'map') {\n        /* eslint-disable-next-line prefer-destructuring */\n        context['[[value]]'][indexof] = next.value[1];\n      }\n\n      next = iterator.next();\n    }\n  }\n\n  if (isString(iterable)) {\n    if (kind === 'map') {\n      throw new TypeError(`Iterator value ${iterable.charAt(0)} is not an entry object`);\n    }\n\n    next = 0;\n    while (next < iterable.length) {\n      const char1 = iterable.charAt(next);\n      const char2 = iterable.charAt(next + 1);\n\n      if (isSurrogatePair(char1, char2)) {\n        key = char1 + char2;\n        next += 1;\n      } else {\n        key = char1;\n      }\n\n      indexof = indexOf(assertIsObject(context)['[[key]]'], key, 'SameValueZero');\n\n      if (indexof < 0) {\n        context['[[key]]'].push(key);\n        context['[[order]]'].push(context['[[id]]'].get());\n        context['[[id]]'].next();\n      }\n\n      next += 1;\n    }\n  } else if (isArrayLike(iterable)) {\n    next = 0;\n    while (next < iterable.length) {\n      if (kind === 'map') {\n        if (isPrimitive(iterable[next])) {\n          throw new TypeError(`Iterator value ${isArrayLike(next.value)} is not an entry object`);\n        }\n\n        /* eslint-disable-next-line prefer-destructuring */\n        key = iterable[next][0];\n      } else {\n        key = iterable[next];\n      }\n\n      key = kind === 'map' ? iterable[next][0] : iterable[next];\n      indexof = indexOf(assertIsObject(context)['[[key]]'], key, 'SameValueZero');\n\n      if (indexof < 0) {\n        if (kind === 'map') {\n          context['[[value]]'].push(iterable[next][1]);\n        }\n\n        context['[[key]]'].push(key);\n        context['[[order]]'].push(context['[[id]]'].get());\n        context['[[id]]'].next();\n      } else if (kind === 'map') {\n        /* eslint-disable-next-line prefer-destructuring */\n        context['[[value]]'][indexof] = iterable[next][1];\n      }\n\n      next += 1;\n    }\n  }\n\n  defineProperty(context, 'size', {\n    value: context['[[key]]'].length,\n    writable: true,\n  });\n};\n\n/**\n * The base forEach method executes a provided function once per each value\n * in the Map/Set object, in insertion order.\n *\n * @private\n * @param {string} kind - Either 'map' or 'set'.\n * @param {object} context - The Map/Set object.\n * @param {Function} callback - Function to execute for each element.\n * @param {*} [thisArg] - Value to use as this when executing callback.\n * @returns {object} The Map/Set object.\n */\nconst baseForEach = function baseForEach(kind, context, callback, thisArg) {\n  assertIsObject(context);\n  assertIsFunction(callback);\n  const pointers = {\n    index: 0,\n    order: context['[[order]]'][0],\n  };\n\n  context['[[change]]'] = false;\n  let {length} = context['[[key]]'];\n  while (pointers.index < length) {\n    if (hasOwn(context['[[key]]'], pointers.index)) {\n      const key = context['[[key]]'][pointers.index];\n      const value = kind === 'map' ? context['[[value]]'][pointers.index] : key;\n      callback.call(thisArg, value, key, context);\n    }\n\n    if (context['[[change]]']) {\n      /* eslint-disable-next-line prefer-destructuring */\n      length = context['[[key]]'].length;\n      some(context['[[order]]'], function _some1(id, count) {\n        pointers.index = count;\n\n        return id > pointers.order;\n      });\n\n      context['[[change]]'] = false;\n    } else {\n      pointers.index += 1;\n    }\n\n    pointers.order = context['[[order]]'][pointers.index];\n  }\n\n  return context;\n};\n\n/**\n * The base has method returns a boolean indicating whether an element with\n * the specified key/value exists in a Map/Set object or not.\n *\n * @private\n * @param {*} key - The key/value to test for presence in the Map/Set object.\n * @returns {boolean} Returns true if an element with the specified key/value\n *  exists in the Map/Set object; otherwise false.\n */\nconst baseHas = function has(key) {\n  /* eslint-disable-next-line babel/no-invalid-this */\n  return indexOf(assertIsObject(this)['[[key]]'], key, 'SameValueZero') > -1;\n};\n\n/**\n * The base clear method removes all elements from a Map/Set object.\n *\n * @private\n * @param {string} kind - Either 'map' or 'set'.\n * @param {object} context - The Map/Set object.\n * @returns {object} The Map/Set object.\n */\nconst baseClear = function baseClear(kind, context) {\n  assertIsObject(context);\n  context['[[id]]'].reset();\n  context['[[change]]'] = true;\n  context.size = 0;\n  context['[[order]]'].length = 0;\n  context['[[key]]'].length = 0;\n\n  if (kind === 'map') {\n    context['[[value]]'].length = 0;\n  }\n\n  return context;\n};\n\n/**\n * The base delete method removes the specified element from a Map/Set object.\n *\n * @private\n * @param {string} kind - Either 'map' or 'set'.\n * @param {object} context - The Map/Set object.\n * @param {*} key - The key/value of the element to remove from Map/Set object.\n * @returns {object} The Map/Set object.\n */\nconst baseDelete = function baseDelete(kind, context, key) {\n  const indexof = indexOf(assertIsObject(context)['[[key]]'], key, 'SameValueZero');\n\n  let result = false;\n\n  if (indexof > -1) {\n    if (kind === 'map') {\n      context['[[value]]'].splice(indexof, 1);\n    }\n\n    context['[[key]]'].splice(indexof, 1);\n    context['[[order]]'].splice(indexof, 1);\n    context['[[change]]'] = true;\n    context.size = context['[[key]]'].length;\n    result = true;\n  }\n\n  return result;\n};\n\n/**\n * The base set and add method.\n *\n * @private\n * @param {string} kind - Either 'map' or 'set'.\n * @param {object} context - The Map/Set object.\n * @param {*} key - The key or value of the element to add/set on the object.\n * @param {*} [value] - The value of the element to add to the Map object.\n * @returns {object} The Map/Set object.\n */\nconst baseAddSet = function _baseAddSet(kind, context, key, value) {\n  const index = indexOf(assertIsObject(context)['[[key]]'], key, 'SameValueZero');\n\n  if (index > -1) {\n    if (kind === 'map') {\n      context['[[value]]'][index] = value;\n    }\n  } else {\n    if (kind === 'map') {\n      context['[[value]]'].push(value);\n    }\n\n    context['[[key]]'].push(key);\n    context['[[order]]'].push(context['[[id]]'].get());\n    context['[[id]]'].next();\n    context['[[change]]'] = true;\n    context.size = context['[[key]]'].length;\n  }\n\n  return context;\n};\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Set object.\n * @param {string} [iteratorKind] - Values are `value`, `key` or `key+value`.\n */\nconst SetIt = function SetIterator(context, iteratorKind) {\n  defineProperties(this, {\n    '[[IteratorHasMore]]': {\n      value: true,\n      writable: true,\n    },\n    '[[Set]]': {\n      value: assertIsObject(context),\n    },\n    '[[SetIterationKind]]': {\n      value: iteratorKind || 'value',\n    },\n    '[[SetNextIndex]]': {\n      value: 0,\n      writable: true,\n    },\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\ndefineProperty(SetIt.prototype, 'next', {\n  value: function next() {\n    const context = assertIsObject(this['[[Set]]']);\n    const index = this['[[SetNextIndex]]'];\n    const iteratorKind = this['[[SetIterationKind]]'];\n    const more = this['[[IteratorHasMore]]'];\n    let object;\n\n    if (index < context['[[key]]'].length && more) {\n      object = {done: false};\n\n      if (iteratorKind === 'key+value') {\n        object.value = [context['[[key]]'][index], context['[[key]]'][index]];\n      } else {\n        object.value = context['[[key]]'][index];\n      }\n\n      this['[[SetNextIndex]]'] += 1;\n    } else {\n      this['[[IteratorHasMore]]'] = false;\n      object = {\n        done: true,\n        /* eslint-disable-next-line no-void */\n        value: void 0,\n      };\n    }\n\n    return object;\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @memberof SetIterator.prototype\n * @returns {object} This Iterator object.\n */\ndefineProperty(SetIt.prototype, $symIt, {\n  value: function iterator() {\n    return this;\n  },\n});\n\n/**\n * This method returns a new Iterator object that contains the\n * values for each element in the Set object in insertion order.\n *\n * @private\n * @this Set\n * @returns {object} A new Iterator object.\n */\nconst setValuesIterator = function values() {\n  return new SetIt(this);\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The Set object lets you store unique values of any type, whether primitive\n * values or object references.\n *\n * @class Set\n * @private\n * @param {*} [iterable] - If an iterable object is passed, all of its elements\n * will be added to the new Set. A null is treated as undefined.\n */\n// eslint-enable jsdoc/check-param-names\nconst $SetObject = function Set() {\n  if (toBoolean(this) === false || !(this instanceof $SetObject)) {\n    throw new TypeError(\"Constructor Set requires 'new'\");\n  }\n\n  /* eslint-disable-next-line prefer-rest-params,no-void */\n  parseIterable('set', this, arguments.length ? arguments[0] : void 0);\n};\n\n// noinspection JSValidateTypes\ndefineProperties(\n  $SetObject.prototype,\n  /** @lends $SetObject.prototype */ {\n    /**\n     * The add() method appends a new element with a specified value to the end\n     * of a Set object.\n     *\n     * @param {*} value - Required. The value of the element to add to the Set\n     *  object.\n     * @returns {object} The Set object.\n     */\n    add: {\n      value: function add(value) {\n        return baseAddSet('set', this, value);\n      },\n    },\n    /**\n     * The clear() method removes all elements from a Set object.\n     *\n     * @returns {object} The Set object.\n     */\n    clear: {\n      value: function clear() {\n        return baseClear('set', this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Set object.\n     *\n     * @param {*} value - The value of the element to remove from the Set object.\n     * @returns {boolean} Returns true if an element in the Set object has been\n     *  removed successfully; otherwise false.\n     */\n    delete: {\n      value: function de1ete(value) {\n        return baseDelete('set', this, value);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains an\n     * array of [value, value] for each element in the Set object, in\n     * insertion order. For Set objects there is no key like in Map objects.\n     * However, to keep the API similar to the Map object, each entry has the\n     * same value for its key and value here, so that an array [value, value]\n     * is returned.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      value: function entries() {\n        return new SetIt(this, 'key+value');\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each value\n     * in the Set object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element.\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Set object.\n     */\n    forEach: {\n      value: function forEach(callback, thisArg) {\n        return baseForEach('set', this, callback, thisArg);\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with the\n     * specified value exists in a Set object or not.\n     *\n     * @function\n     * @param {*} value - The value to test for presence in the Set object.\n     * @returns {boolean} Returns true if an element with the specified value\n     *  exists in the Set object; otherwise false.\n     */\n    has: {\n      value: baseHas,\n    },\n    /**\n     * The keys() method is an alias for the `values` method (for similarity\n     * with Map objects); it behaves exactly the same and returns values of Set elements.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      value: setValuesIterator,\n    },\n    /**\n     * The value of size is an integer representing how many entries the Set\n     * object has.\n     *\n     * @name size\n     * @memberof $SetObject\n     * @instance\n     * @type {number}\n     */\n    size: {\n      value: 0,\n      writable: true,\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Set object in insertion order.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      value: setValuesIterator,\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the values property.\n *\n * @function symIt\n * @memberof $SetObject.prototype\n * @returns {object} A new Iterator object.\n */\ndefineProperty($SetObject.prototype, $symIt, {\n  value: setValuesIterator,\n});\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Map object.\n * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.\n */\nconst MapIt = function MapIterator(context, iteratorKind) {\n  defineProperties(this, {\n    '[[IteratorHasMore]]': {\n      value: true,\n      writable: true,\n    },\n    '[[Map]]': {\n      value: assertIsObject(context),\n    },\n    '[[MapIterationKind]]': {\n      value: iteratorKind,\n    },\n    '[[MapNextIndex]]': {\n      value: 0,\n      writable: true,\n    },\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\ndefineProperty(MapIt.prototype, 'next', {\n  value: function next() {\n    const context = assertIsObject(this['[[Map]]']);\n    const index = this['[[MapNextIndex]]'];\n    const iteratorKind = this['[[MapIterationKind]]'];\n    const more = this['[[IteratorHasMore]]'];\n    let object;\n    assertIsObject(context);\n\n    if (index < context['[[key]]'].length && more) {\n      object = {done: false};\n\n      if (iteratorKind === 'key+value') {\n        object.value = [context['[[key]]'][index], context['[[value]]'][index]];\n      } else {\n        object.value = context[`[[${iteratorKind}]]`][index];\n      }\n\n      this['[[MapNextIndex]]'] += 1;\n    } else {\n      this['[[IteratorHasMore]]'] = false;\n      object = {\n        done: true,\n        /* eslint-disable-next-line no-void */\n        value: void 0,\n      };\n    }\n\n    return object;\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @memberof MapIterator.prototype\n * @returns {object} This Iterator object.\n */\ndefineProperty(MapIt.prototype, $symIt, {\n  value: function iterator() {\n    return this;\n  },\n});\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The Map object is a simple key/value map. Any value (both objects and\n * primitive values) may be used as either a key or a value.\n *\n * @class Map\n * @private\n * @param {*} [iterable] - Iterable is an Array or other iterable object whose\n *  elements are key-value pairs (2-element Arrays). Each key-value pair is\n *  added to the new Map. A null is treated as undefined.\n */\n// eslint-enable jsdoc/check-param-names\nconst $MapObject = function Map() {\n  if (toBoolean(this) === false || !(this instanceof $MapObject)) {\n    throw new TypeError(\"Constructor Map requires 'new'\");\n  }\n\n  /* eslint-disable-next-line prefer-rest-params,no-void */\n  parseIterable('map', this, arguments.length ? arguments[0] : void 0);\n};\n\n// noinspection JSValidateTypes\ndefineProperties(\n  $MapObject.prototype,\n  /** @lends $MapObject.prototype */ {\n    /**\n     * The clear() method removes all elements from a Map object.\n     *\n     * @returns {object} The Map object.\n     */\n    clear: {\n      value: function clear() {\n        return baseClear('map', this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to remove from the Map object.\n     * @returns {boolean} Returns true if an element in the Map object has been\n     *  removed successfully.\n     */\n    delete: {\n      value: function de1ete(key) {\n        return baseDelete('map', this, key);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains the\n     * [key, value] pairs for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      value: function entries() {\n        return new MapIt(this, 'key+value');\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each\n     * key/value pair in the Map object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element..\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Map object.\n     */\n    forEach: {\n      value: function forEach(callback, thisArg) {\n        return baseForEach('map', this, callback, thisArg);\n      },\n    },\n    /**\n     * The get() method returns a specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to return from the Map object.\n     * @returns {*} Returns the element associated with the specified key or\n     *  undefined if the key can't be found in the Map object.\n     */\n    get: {\n      value: function get(key) {\n        const index = indexOf(assertIsObject(this)['[[key]]'], key, 'SameValueZero');\n\n        /* eslint-disable-next-line no-void */\n        return index > -1 ? this['[[value]]'][index] : void 0;\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with\n     * the specified key exists or not.\n     *\n     * @function\n     * @param {*} key - The key of the element to test for presence in the Map object.\n     * @returns {boolean} Returns true if an element with the specified key\n     *  exists in the Map object; otherwise false.\n     */\n    has: {\n      value: baseHas,\n    },\n    /**\n     * The keys() method returns a new Iterator object that contains the keys\n     * for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      value: function keys() {\n        return new MapIt(this, 'key');\n      },\n    },\n    /**\n     * The set() method adds a new element with a specified key and value to\n     * a Map object.\n     *\n     * @param {*} key - The key of the element to add to the Map object.\n     * @param {*} value - The value of the element to add to the Map object.\n     * @returns {object} The Map object.\n     */\n    set: {\n      value: function set(key, value) {\n        return baseAddSet('map', this, key, value);\n      },\n    },\n    /**\n     * The value of size is an integer representing how many entries the Map\n     * object has.\n     *\n     * @name size\n     * @memberof $MapObject\n     * @instance\n     * @type {number}\n     */\n    size: {\n      value: 0,\n      writable: true,\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      value: function values() {\n        return new MapIt(this, 'value');\n      },\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the entries property.\n *\n * @function symIt\n * @memberof module:collections-x.Map.prototype\n * @returns {object} A new Iterator object.\n */\ndefineProperty($MapObject.prototype, $symIt, {\n  value: $MapObject.prototype.entries,\n});\n\n/*\n * Determine whether to use shim or native.\n */\n\nlet ExportMap = $MapObject;\ntry {\n  /* eslint-disable-next-line compat/compat */\n  ExportMap = new Map() ? Map : $MapObject;\n} catch (ignore) {\n  // empty\n}\n\nexport const MapConstructor = ExportMap;\n\nlet ExportSet = $SetObject;\ntry {\n  /* eslint-disable-next-line compat/compat */\n  ExportSet = new Set() ? Set : $SetObject;\n} catch (ignore) {\n  // empty\n}\n\nexport const SetConstructor = ExportSet;\n\nlet testMap;\n\nif (ExportMap !== $MapObject) {\n  testMap = new ExportMap();\n\n  if (isNumberType(testMap.size) === false || testMap.size !== 0) {\n    ExportMap = $MapObject;\n  } else {\n    const propsMap = ['has', 'set', 'clear', 'delete', 'forEach', 'values', 'entries', 'keys', $symIt];\n\n    const failedMap = some(propsMap, (method) => {\n      return isFunction(testMap[method]) === false;\n    });\n\n    if (failedMap) {\n      ExportMap = $MapObject;\n    }\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  // Safari 8, for example, doesn't accept an iterable.\n  let mapAcceptsArguments = false;\n  try {\n    mapAcceptsArguments = new ExportMap([[1, 2]]).get(1) === 2;\n  } catch (ignore) {\n    // empty\n  }\n\n  if (mapAcceptsArguments === false) {\n    ExportMap = $MapObject;\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  testMap = new ExportMap();\n  const mapSupportsChaining = testMap.set(1, 2) === testMap;\n\n  if (mapSupportsChaining === false) {\n    ExportMap = $MapObject;\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  // Chrome 38-42, node 0.11/0.12, iojs 1/2 also have a bug when the Map has a size > 4\n  testMap = new ExportMap([[1, 0], [2, 0], [3, 0], [4, 0]]);\n  testMap.set(-0, testMap);\n  const gets = testMap.get(0) === testMap && testMap.get(-0) === testMap;\n  const mapUsesSameValueZero = gets && testMap.has(0) && testMap.has(-0);\n\n  if (mapUsesSameValueZero === false) {\n    ExportMap = $MapObject;\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  if (setPrototypeOf) {\n    const MyMap = function MyMap(arg) {\n      testMap = new ExportMap(arg);\n      setPrototypeOf(testMap, MyMap.prototype);\n\n      return testMap;\n    };\n\n    setPrototypeOf(MyMap, ExportMap);\n    MyMap.prototype = create(ExportMap.prototype, {constructor: {value: MyMap}});\n\n    let mapSupportsSubclassing = false;\n    try {\n      testMap = new MyMap([]);\n      // Firefox 32 is ok with the instantiating the subclass but will\n      // throw when the map is used.\n      testMap.set(42, 42);\n      mapSupportsSubclassing = testMap instanceof MyMap;\n    } catch (ignore) {\n      // empty\n    }\n\n    if (mapSupportsSubclassing === false) {\n      ExportMap = $MapObject;\n    }\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  let mapRequiresNew;\n  try {\n    /* eslint-disable-next-line babel/new-cap */\n    mapRequiresNew = !(ExportMap() instanceof ExportMap);\n  } catch (e) {\n    mapRequiresNew = e instanceof TypeError;\n  }\n\n  if (mapRequiresNew === false) {\n    ExportMap = $MapObject;\n  }\n}\n\nif (ExportMap !== $MapObject) {\n  testMap = new ExportMap();\n  let mapIterationThrowsStopIterator;\n  try {\n    mapIterationThrowsStopIterator = testMap.keys().next().done === false;\n  } catch (ignore) {\n    mapIterationThrowsStopIterator = true;\n  }\n\n  if (mapIterationThrowsStopIterator) {\n    ExportMap = $MapObject;\n  }\n}\n\n// Safari 8\nif (ExportMap !== $MapObject && isFunction(new ExportMap().keys().next) === false) {\n  ExportMap = $MapObject;\n}\n\nif (hasRealSymbolIterator && ExportMap !== $MapObject) {\n  const testMapProto = getPrototypeOf(new ExportMap().keys());\n  let hasBuggyMapIterator = true;\n\n  if (testMapProto) {\n    hasBuggyMapIterator = isFunction(testMapProto[$symIt]) === false;\n  }\n\n  if (hasBuggyMapIterator) {\n    ExportMap = $MapObject;\n  }\n}\n\nlet testSet;\n\nif (ExportSet !== $SetObject) {\n  testSet = new ExportSet();\n\n  if (isNumberType(testSet.size) === false || testSet.size !== 0) {\n    ExportMap = $MapObject;\n  } else {\n    const propsSet = ['has', 'add', 'clear', 'delete', 'forEach', 'values', 'entries', 'keys', $symIt];\n\n    const failedSet = some(propsSet, (method) => {\n      return isFunction(testSet[method]) === false;\n    });\n\n    if (failedSet) {\n      ExportSet = $SetObject;\n    }\n  }\n}\n\nif (ExportSet !== $SetObject) {\n  testSet = new ExportSet();\n  testSet.delete(0);\n  testSet.add(-0);\n  const setUsesSameValueZero = testSet.has(0) && testSet.has(-0);\n\n  if (setUsesSameValueZero === false) {\n    ExportSet = $SetObject;\n  }\n}\n\nif (ExportSet !== $SetObject) {\n  testSet = new ExportSet();\n  const setSupportsChaining = testSet.add(1) === testSet;\n\n  if (setSupportsChaining === false) {\n    ExportSet = $SetObject;\n  }\n}\n\nif (ExportSet !== $SetObject) {\n  if (setPrototypeOf) {\n    const MySet = function MySet(arg) {\n      testSet = new ExportSet(arg);\n      setPrototypeOf(testSet, MySet.prototype);\n\n      return testSet;\n    };\n\n    setPrototypeOf(MySet, ExportSet);\n    MySet.prototype = create(ExportSet.prototype, {constructor: {value: MySet}});\n\n    let setSupportsSubclassing = false;\n    try {\n      testSet = new MySet([]);\n      testSet.add(42, 42);\n      setSupportsSubclassing = testSet instanceof MySet;\n    } catch (ignore) {\n      // empty\n    }\n\n    if (setSupportsSubclassing === false) {\n      ExportSet = $SetObject;\n    }\n  }\n}\n\nif (ExportSet !== $SetObject) {\n  let setRequiresNew;\n  try {\n    /* eslint-disable-next-line babel/new-cap */\n    setRequiresNew = !(ExportSet() instanceof ExportSet);\n  } catch (e) {\n    setRequiresNew = e instanceof TypeError;\n  }\n\n  if (setRequiresNew === false) {\n    ExportSet = $SetObject;\n  }\n}\n\nif (ExportSet !== $SetObject) {\n  testSet = new ExportSet();\n  let setIterationThrowsStopIterator;\n  try {\n    setIterationThrowsStopIterator = testSet.keys().next().done === false;\n  } catch (ignore) {\n    setIterationThrowsStopIterator = true;\n  }\n\n  if (setIterationThrowsStopIterator) {\n    ExportSet = $SetObject;\n  }\n}\n\n// Safari 8\nif (ExportSet !== $SetObject && isFunction(new ExportSet().keys().next) === false) {\n  ExportSet = $SetObject;\n}\n\nif (hasRealSymbolIterator && ExportSet !== $SetObject) {\n  const testSetProto = getPrototypeOf(new ExportSet().keys());\n  let hasBuggySetIterator = true;\n\n  if (testSetProto) {\n    hasBuggySetIterator = isFunction(testSetProto[$symIt]) === false;\n  }\n\n  if (hasBuggySetIterator) {\n    ExportSet = $SetObject;\n  }\n}\n\nconst hasCommon = function hasCommon(object) {\n  return (\n    isObjectLike(object) &&\n    isFunction(object[$symIt]) &&\n    isBoolean(object['[[changed]]']) &&\n    isObjectLike(object['[[id]]']) &&\n    isArray(object['[[key]]']) &&\n    isArray(object['[[order]]']) &&\n    isNumberType(object.size)\n  );\n};\n\n/**\n * Determine if an `object` is a `Map`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Map`,\n *  else `false`.\n */\nlet $$isMap;\n\nif (ExportMap === $MapObject) {\n  $$isMap = function isMap(object) {\n    if ($isMap(object)) {\n      return true;\n    }\n\n    return hasCommon(object) && isArray(object['[[value]]']);\n  };\n} else {\n  $$isMap = $isMap;\n}\n\nexport const isMap = $$isMap;\n\n/**\n * Determine if an `object` is a `Set`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Set`,\n *  else `false`.\n */\nlet $$isSet;\n\nif (ExportSet === $SetObject) {\n  $$isSet = function isSet(object) {\n    if (isSet(object)) {\n      return true;\n    }\n\n    return hasCommon(object) && typeof object['[[value]]'] === 'undefined';\n  };\n} else {\n  $$isSet = $isSet;\n}\n\nexport const isSet = $$isSet;\n"]}