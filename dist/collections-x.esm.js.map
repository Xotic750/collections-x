{"version":3,"sources":["../src/collections-x.js"],"names":[],"mappings":"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","file":"collections-x.esm.js","sourcesContent":["import hasOwn from 'has-own-property-x';\nimport isFunction from 'is-function-x';\nimport defineProperty from 'object-define-property-x';\nimport defineProperties from 'object-define-properties-x';\nimport isString from 'is-string';\nimport isArrayLike from 'is-array-like-x';\nimport isPrimitive from 'is-primitive';\nimport isSurrogatePair from 'is-surrogate-pair-x';\nimport indexOf from 'index-of-x';\nimport assertIsFunction from 'assert-is-function-x';\nimport assertIsObject from 'assert-is-object-x';\nimport IdGenerator from 'big-counter-x';\nimport isNil from 'is-nil-x';\nimport $isMap from 'is-map-x';\nimport $isSet from 'is-set-x';\nimport isObjectLike from 'is-object-like-x';\nimport isArray from 'is-array-x';\nimport isBoolean from 'is-boolean-object';\nimport some from 'array-some-x';\nimport getPrototypeOf from 'get-prototype-of-x';\nimport hasSymbolSupport from 'has-symbol-support-x';\nimport create from 'object-create-x';\nimport toBoolean from 'to-boolean-x';\nimport slice from 'array-slice-x';\n\n/* eslint-disable-next-line no-void */\nconst UNDEFINED = void 0;\nconst SIZE = 'size';\nconst NEXT = 'next';\nconst KEY = 'key';\nconst VALUE = 'value';\nconst DONE = 'done';\nconst WRITABLE = 'writable';\nconst MAP = 'map';\nconst SET = 'set';\nconst PROP_CHANGED = '[[changed]]';\nconst PROP_CHANGE = '[[change]]';\nconst PROP_ID = '[[id]]';\nconst PROP_KEY = `[[${KEY}]]`;\nconst PROP_ORDER = '[[order]]';\nconst PROP_VALUE = `[[${VALUE}]]`;\nconst PROP_ITERATORHASMORE = '[[IteratorHasMore]]';\nconst PROP_MAP = '[[Map]]';\nconst PROP_MAPITERATIONKIND = '[[MapIterationKind]]';\nconst PROP_MAPNEXTINDEX = '[[MapNextIndex]]';\nconst PROP_SET = '[[Set]]';\nconst PROP_SETITERATIONKIND = '[[SetIterationKind]]';\nconst PROP_SETNEXTINDEX = '[[SetNextIndex]]';\nconst KIND_VALUE = VALUE;\nconst KIND_KEY = KEY;\nconst KIND_KEY_VALUE = `${KIND_KEY}+${KIND_VALUE}`;\nconst SAMEVALUEZERO = 'SameValueZero';\nconst ES6_SHIM_ITERATOR = '_es6-shim iterator_';\nconst AT_AT_ITERATOR = '@@iterator';\n\nconst {setPrototypeOf} = {}.constructor;\n/* eslint-disable-next-line compat/compat */\nconst hasRealSymbolIterator = hasSymbolSupport && typeof Symbol.iterator === 'symbol';\n/* eslint-disable-next-line compat/compat */\nconst hasFakeSymbolIterator = typeof Symbol === 'object' && typeof Symbol.iterator === 'string';\nconst hasSymbolIterator = hasRealSymbolIterator || hasFakeSymbolIterator;\n\nconst getSymIt = function getSymIt() {\n  if (hasSymbolIterator) {\n    /* eslint-disable-next-line compat/compat */\n    return Symbol.iterator;\n  }\n\n  if (isFunction([][ES6_SHIM_ITERATOR])) {\n    return ES6_SHIM_ITERATOR;\n  }\n\n  return AT_AT_ITERATOR;\n};\n\n/**\n * The iterator identifier that is in use.\n *\n * Type {Symbol|string}.\n */\nexport const symIt = getSymIt();\n\n/**\n * Detect an iterator function.\n *\n * @private\n * @param {*} iterable - Value to detect iterator function.\n * @returns {Symbol|string|undefined} The iterator property identifier.\n */\nconst getSymbolIterator = function getSymbolIterator(iterable) {\n  if (isNil(iterable) === false) {\n    if (hasSymbolIterator && iterable[symIt]) {\n      return symIt;\n    }\n\n    if (iterable[ES6_SHIM_ITERATOR]) {\n      return ES6_SHIM_ITERATOR;\n    }\n\n    if (iterable[AT_AT_ITERATOR]) {\n      return AT_AT_ITERATOR;\n    }\n  }\n\n  return UNDEFINED;\n};\n\nconst parseIterable = function parseIterable() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, iterable, context, symbolIterator] = slice(arguments);\n  const iterator = iterable[symbolIterator]();\n  let next = iterator[NEXT]();\n\n  if (kind === MAP) {\n    if (isArrayLike(next[VALUE]) === false || next[VALUE].length < 2) {\n      throw new TypeError(`Iterator value ${isArrayLike(next[VALUE])} is not an entry object`);\n    }\n  }\n\n  while (next[DONE] === false) {\n    const key = kind === MAP ? next[VALUE][0] : next[VALUE];\n    const indexof = indexOf(assertIsObject(context)[PROP_KEY], key, SAMEVALUEZERO);\n\n    if (indexof < 0) {\n      if (kind === MAP) {\n        context[PROP_VALUE].push(next[VALUE][1]);\n      }\n\n      context[PROP_KEY].push(key);\n      context[PROP_ORDER].push(context[PROP_ID].get());\n      context[PROP_ID][NEXT]();\n    } else if (kind === MAP) {\n      /* eslint-disable-next-line prefer-destructuring */\n      context[PROP_VALUE][indexof] = next[VALUE][1];\n    }\n\n    next = iterator[NEXT]();\n  }\n};\n\nconst parseString = function parseString() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, iterable, context] = slice(arguments);\n\n  if (kind === MAP) {\n    throw new TypeError(`Iterator value ${iterable.charAt(0)} is not an entry object`);\n  }\n\n  let next = 0;\n  while (next < iterable.length) {\n    const char1 = iterable.charAt(next);\n    const char2 = iterable.charAt(next + 1);\n    let key;\n\n    if (isSurrogatePair(char1, char2)) {\n      key = char1 + char2;\n      next += 1;\n    } else {\n      key = char1;\n    }\n\n    const indexof = indexOf(assertIsObject(context)[PROP_KEY], key, SAMEVALUEZERO);\n\n    if (indexof < 0) {\n      context[PROP_KEY].push(key);\n      context[PROP_ORDER].push(context[PROP_ID].get());\n      context[PROP_ID][NEXT]();\n    }\n\n    next += 1;\n  }\n};\n\nconst parseArrayLike = function parseArrayLike() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, iterable, context] = slice(arguments);\n  let next = 0;\n  while (next < iterable.length) {\n    let key;\n\n    if (kind === MAP) {\n      if (isPrimitive(iterable[next])) {\n        throw new TypeError(`Iterator value ${isArrayLike(next[VALUE])} is not an entry object`);\n      }\n\n      /* eslint-disable-next-line prefer-destructuring */\n      key = iterable[next][0];\n    } else {\n      key = iterable[next];\n    }\n\n    const indexof = indexOf(assertIsObject(context)[PROP_KEY], key, SAMEVALUEZERO);\n\n    if (indexof < 0) {\n      if (kind === MAP) {\n        context[PROP_VALUE].push(iterable[next][1]);\n      }\n\n      context[PROP_KEY].push(key);\n      context[PROP_ORDER].push(context[PROP_ID].get());\n      context[PROP_ID][NEXT]();\n    } else if (kind === MAP) {\n      /* eslint-disable-next-line prefer-destructuring */\n      context[PROP_VALUE][indexof] = iterable[next][1];\n    }\n\n    next += 1;\n  }\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * If an iterable object is passed, all of its elements will be added to the\n * new Map/Set, null is treated as undefined.\n *\n * @private\n * @param {string} kind - Either MAP or SET.\n * @param {object} context - The Map/Set object.\n * @param {*} iterable - Value to parsed.\n */\n// eslint-enable jsdoc/check-param-names\nconst parse = function parse() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, context, iterable] = slice(arguments);\n  const symbolIterator = getSymbolIterator(iterable);\n\n  if (kind === MAP) {\n    defineProperty(context, PROP_VALUE, {[VALUE]: []});\n  }\n\n  defineProperties(context, {\n    [PROP_CHANGED]: {[VALUE]: false},\n    [PROP_ID]: {[VALUE]: new IdGenerator()},\n    [PROP_KEY]: {[VALUE]: []},\n    [PROP_ORDER]: {[VALUE]: []},\n  });\n\n  if (iterable && isFunction(iterable[symbolIterator])) {\n    parseIterable(kind, iterable, context, symbolIterator);\n  } else if (isString(iterable)) {\n    parseString(kind, iterable, context);\n  } else if (isArrayLike(iterable)) {\n    parseArrayLike(kind, iterable, context);\n  }\n\n  defineProperty(context, SIZE, {[VALUE]: context[PROP_KEY].length, [WRITABLE]: true});\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The base forEach method executes a provided function once per each value\n * in the Map/Set object, in insertion order.\n *\n * @private\n * @param {string} kind - Either MAP or SET.\n * @param {object} context - The Map/Set object.\n * @param {Function} callback - Function to execute for each element.\n * @param {*} [thisArg] - Value to use as this when executing callback.\n * @returns {object} The Map/Set object.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseForEach = function baseForEach() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, context, callback, thisArg] = slice(arguments);\n  assertIsObject(context);\n  assertIsFunction(callback);\n  const pointers = {index: 0, order: context[PROP_ORDER][0]};\n\n  context[PROP_CHANGE] = false;\n  let {length} = context[PROP_KEY];\n  while (pointers.index < length) {\n    if (hasOwn(context[PROP_KEY], pointers.index)) {\n      const key = context[PROP_KEY][pointers.index];\n      const value = kind === MAP ? context[PROP_VALUE][pointers.index] : key;\n      callback.call(thisArg, value, key, context);\n    }\n\n    if (context[PROP_CHANGE]) {\n      /* eslint-disable-next-line prefer-destructuring */\n      length = context[PROP_KEY].length;\n      some(context[PROP_ORDER], function predicate(id, count) {\n        pointers.index = count;\n\n        return id > pointers.order;\n      });\n\n      context[PROP_CHANGE] = false;\n    } else {\n      pointers.index += 1;\n    }\n\n    pointers.order = context[PROP_ORDER][pointers.index];\n  }\n\n  return context;\n};\n\n/**\n * The base has method returns a boolean indicating whether an element with\n * the specified key/value exists in a Map/Set object or not.\n *\n * @private\n * @param {*} key - The key/value to test for presence in the Map/Set object.\n * @returns {boolean} Returns true if an element with the specified key/value\n *  exists in the Map/Set object; otherwise false.\n */\nconst baseHas = function has(key) {\n  /* eslint-disable-next-line babel/no-invalid-this */\n  return indexOf(assertIsObject(this)[PROP_KEY], key, SAMEVALUEZERO) > -1;\n};\n\n/**\n * The base clear method removes all elements from a Map/Set object.\n *\n * @private\n * @param {string} kind - Either MAP or SET.\n * @param {object} context - The Map/Set object.\n * @returns {object} The Map/Set object.\n */\nconst baseClear = function baseClear(kind, context) {\n  assertIsObject(context);\n  context[PROP_ID].reset();\n  context[PROP_CHANGE] = true;\n  context[SIZE] = 0;\n  context[PROP_ORDER].length = 0;\n  context[PROP_KEY].length = 0;\n\n  if (kind === MAP) {\n    context[PROP_VALUE].length = 0;\n  }\n\n  return context;\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The base delete method removes the specified element from a Map/Set object.\n *\n * @private\n * @param {string} kind - Either MAP or SET.\n * @param {object} context - The Map/Set object.\n * @param {*} key - The key/value of the element to remove from Map/Set object.\n * @returns {object} The Map/Set object.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseDelete = function baseDelete() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, context, key] = slice(arguments);\n  const indexof = indexOf(assertIsObject(context)[PROP_KEY], key, SAMEVALUEZERO);\n  let result = false;\n\n  if (indexof > -1) {\n    if (kind === MAP) {\n      context[PROP_VALUE].splice(indexof, 1);\n    }\n\n    context[PROP_KEY].splice(indexof, 1);\n    context[PROP_ORDER].splice(indexof, 1);\n    context[PROP_CHANGE] = true;\n    context[SIZE] = context[PROP_KEY].length;\n    result = true;\n  }\n\n  return result;\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The base set and add method.\n *\n * @private\n * @param {string} kind - Either MAP or SET.\n * @param {object} context - The Map/Set object.\n * @param {*} key - The key or value of the element to add/set on the object.\n * @param {*} [value] - The value of the element to add to the Map object.\n * @returns {object} The Map/Set object.\n */\n// eslint-enable jsdoc/check-param-names\nconst baseAddSet = function baseAddSet() {\n  /* eslint-disable-next-line prefer-rest-params */\n  const [kind, context, key, value] = slice(arguments);\n  const index = indexOf(assertIsObject(context)[PROP_KEY], key, SAMEVALUEZERO);\n\n  if (index > -1) {\n    if (kind === MAP) {\n      context[PROP_VALUE][index] = value;\n    }\n  } else {\n    if (kind === MAP) {\n      context[PROP_VALUE].push(value);\n    }\n\n    context[PROP_KEY].push(key);\n    context[PROP_ORDER].push(context[PROP_ID].get());\n    context[PROP_ID][NEXT]();\n    context[PROP_CHANGE] = true;\n    context[SIZE] = context[PROP_KEY].length;\n  }\n\n  return context;\n};\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Set object.\n * @param {string} [iteratorKind] - Values are `value`, `key` or `key+value`.\n */\nconst SetIt = function SetIterator(context, iteratorKind) {\n  defineProperties(this, {\n    [PROP_ITERATORHASMORE]: {[VALUE]: true, [WRITABLE]: true},\n    [PROP_SET]: {[VALUE]: assertIsObject(context)},\n    [PROP_SETITERATIONKIND]: {[VALUE]: iteratorKind || KIND_VALUE},\n    [PROP_SETNEXTINDEX]: {[VALUE]: 0, [WRITABLE]: true},\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\ndefineProperty(SetIt.prototype, NEXT, {\n  [VALUE]: function next() {\n    const context = assertIsObject(this[PROP_SET]);\n    const index = this[PROP_SETNEXTINDEX];\n    const iteratorKind = this[PROP_SETITERATIONKIND];\n    const more = this[PROP_ITERATORHASMORE];\n\n    if (index < context[PROP_KEY].length && more) {\n      this[PROP_SETNEXTINDEX] += 1;\n\n      return {\n        [DONE]: false,\n        [VALUE]:\n          iteratorKind === KIND_KEY_VALUE ? [context[PROP_KEY][index], context[PROP_KEY][index]] : context[PROP_KEY][index],\n      };\n    }\n\n    this[PROP_ITERATORHASMORE] = false;\n\n    return {[DONE]: true, [VALUE]: UNDEFINED};\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @memberof SetIterator.prototype\n * @returns {object} This Iterator object.\n */\ndefineProperty(SetIt.prototype, symIt, {\n  [VALUE]: function iterator() {\n    return this;\n  },\n});\n\n/**\n * This method returns a new Iterator object that contains the\n * values for each element in the Set object in insertion order.\n *\n * @private\n * @this Set\n * @returns {object} A new Iterator object.\n */\nconst setValuesIterator = function values() {\n  return new SetIt(this);\n};\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The Set object lets you store unique values of any type, whether primitive\n * values or object references.\n *\n * @class Set\n * @private\n * @param {*} [iterable] - If an iterable object is passed, all of its elements\n * will be added to the new Set. A null is treated as undefined.\n */\n// eslint-enable jsdoc/check-param-names\nexport const SetImplementation = function Set() {\n  if (toBoolean(this) === false || !(this instanceof SetImplementation)) {\n    throw new TypeError(\"Constructor Set requires 'new'\");\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  parse(SET, this, arguments.length ? arguments[0] : UNDEFINED);\n};\n\n// noinspection JSValidateTypes\ndefineProperties(\n  SetImplementation.prototype,\n  /** @lends SetImplementation.prototype */ {\n    /**\n     * The add() method appends a new element with a specified value to the end\n     * of a Set object.\n     *\n     * @param {*} value - Required. The value of the element to add to the Set\n     *  object.\n     * @returns {object} The Set object.\n     */\n    add: {\n      [VALUE]: function add(value) {\n        return baseAddSet(SET, this, value);\n      },\n    },\n    /**\n     * The clear() method removes all elements from a Set object.\n     *\n     * @returns {object} The Set object.\n     */\n    clear: {\n      [VALUE]: function clear() {\n        return baseClear(SET, this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Set object.\n     *\n     * @param {*} value - The value of the element to remove from the Set object.\n     * @returns {boolean} Returns true if an element in the Set object has been\n     *  removed successfully; otherwise false.\n     */\n    delete: {\n      [VALUE]: function de1ete(value) {\n        return baseDelete(SET, this, value);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains an\n     * array of [value, value] for each element in the Set object, in\n     * insertion order. For Set objects there is no key like in Map objects.\n     * However, to keep the API similar to the Map object, each entry has the\n     * same value for its key and value here, so that an array [value, value]\n     * is returned.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      [VALUE]: function entries() {\n        return new SetIt(this, KIND_KEY_VALUE);\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each value\n     * in the Set object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element.\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Set object.\n     */\n    forEach: {\n      [VALUE]: function forEach(callback, thisArg) {\n        return baseForEach(SET, this, callback, thisArg);\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with the\n     * specified value exists in a Set object or not.\n     *\n     * @function\n     * @param {*} value - The value to test for presence in the Set object.\n     * @returns {boolean} Returns true if an element with the specified value\n     *  exists in the Set object; otherwise false.\n     */\n    has: {\n      [VALUE]: baseHas,\n    },\n    /**\n     * The keys() method is an alias for the `values` method (for similarity\n     * with Map objects); it behaves exactly the same and returns values of Set elements.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      [VALUE]: setValuesIterator,\n    },\n    /**\n     * The value of size is an integer representing how many entries the Set\n     * object has.\n     *\n     * @name size\n     * @memberof $SetObject\n     * @instance\n     * @type {number}\n     */\n    size: {\n      [VALUE]: 0,\n      [WRITABLE]: true,\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Set object in insertion order.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      [VALUE]: setValuesIterator,\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the values property.\n *\n * @function symIt\n * @memberof $SetObject.prototype\n * @returns {object} A new Iterator object.\n */\ndefineProperty(SetImplementation.prototype, symIt, {\n  [VALUE]: setValuesIterator,\n});\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Map object.\n * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.\n */\nconst MapIt = function MapIterator(context, iteratorKind) {\n  defineProperties(this, {\n    [PROP_ITERATORHASMORE]: {[VALUE]: true, [WRITABLE]: true},\n    [PROP_MAP]: {[VALUE]: assertIsObject(context)},\n    [PROP_MAPITERATIONKIND]: {[VALUE]: iteratorKind},\n    [PROP_MAPNEXTINDEX]: {[VALUE]: 0, [WRITABLE]: true},\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\ndefineProperty(MapIt.prototype, NEXT, {\n  [VALUE]: function next() {\n    const context = assertIsObject(this[PROP_MAP]);\n    const index = this[PROP_MAPNEXTINDEX];\n    const iteratorKind = this[PROP_MAPITERATIONKIND];\n    const more = this[PROP_ITERATORHASMORE];\n\n    if (index < context[PROP_KEY].length && more) {\n      this[PROP_MAPNEXTINDEX] += 1;\n\n      return {\n        [DONE]: false,\n        [VALUE]:\n          iteratorKind === KIND_KEY_VALUE\n            ? [context[PROP_KEY][index], context[PROP_VALUE][index]]\n            : context[`[[${iteratorKind}]]`][index],\n      };\n    }\n\n    this[PROP_ITERATORHASMORE] = false;\n\n    return {[DONE]: true, [VALUE]: UNDEFINED};\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @memberof MapIterator.prototype\n * @returns {object} This Iterator object.\n */\ndefineProperty(MapIt.prototype, symIt, {\n  [VALUE]: function iterator() {\n    return this;\n  },\n});\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * The Map object is a simple key/value map. Any value (both objects and\n * primitive values) may be used as either a key or a value.\n *\n * @class Map\n * @private\n * @param {*} [iterable] - Iterable is an Array or other iterable object whose\n *  elements are key-value pairs (2-element Arrays). Each key-value pair is\n *  added to the new Map. A null is treated as undefined.\n */\n// eslint-enable jsdoc/check-param-names\nexport const MapImplementation = function Map() {\n  if (toBoolean(this) === false || !(this instanceof MapImplementation)) {\n    throw new TypeError(\"Constructor Map requires 'new'\");\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  parse(MAP, this, arguments.length ? arguments[0] : UNDEFINED);\n};\n\n// noinspection JSValidateTypes\ndefineProperties(\n  MapImplementation.prototype,\n  /** @lends MapImplementation.prototype */ {\n    /**\n     * The clear() method removes all elements from a Map object.\n     *\n     * @returns {object} The Map object.\n     */\n    clear: {\n      [VALUE]: function clear() {\n        return baseClear(MAP, this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to remove from the Map object.\n     * @returns {boolean} Returns true if an element in the Map object has been\n     *  removed successfully.\n     */\n    delete: {\n      [VALUE]: function de1ete(key) {\n        return baseDelete(MAP, this, key);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains the\n     * [key, value] pairs for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      [VALUE]: function entries() {\n        return new MapIt(this, KIND_KEY_VALUE);\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each\n     * key/value pair in the Map object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element..\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Map object.\n     */\n    forEach: {\n      [VALUE]: function forEach(callback, thisArg) {\n        return baseForEach(MAP, this, callback, thisArg);\n      },\n    },\n    /**\n     * The get() method returns a specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to return from the Map object.\n     * @returns {*} Returns the element associated with the specified key or\n     *  undefined if the key can't be found in the Map object.\n     */\n    get: {\n      [VALUE]: function get(key) {\n        const index = indexOf(assertIsObject(this)[PROP_KEY], key, SAMEVALUEZERO);\n\n        return index > -1 ? this[PROP_VALUE][index] : UNDEFINED;\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with\n     * the specified key exists or not.\n     *\n     * @function\n     * @param {*} key - The key of the element to test for presence in the Map object.\n     * @returns {boolean} Returns true if an element with the specified key\n     *  exists in the Map object; otherwise false.\n     */\n    has: {\n      [VALUE]: baseHas,\n    },\n    /**\n     * The keys() method returns a new Iterator object that contains the keys\n     * for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      [VALUE]: function keys() {\n        return new MapIt(this, KIND_KEY);\n      },\n    },\n    /**\n     * The set() method adds a new element with a specified key and value to\n     * a Map object.\n     *\n     * @param {*} key - The key of the element to add to the Map object.\n     * @param {*} value - The value of the element to add to the Map object.\n     * @returns {object} The Map object.\n     */\n    set: {\n      [VALUE]: function set(key, value) {\n        return baseAddSet(MAP, this, key, value);\n      },\n    },\n    /**\n     * The value of size is an integer representing how many entries the Map\n     * object has.\n     *\n     * @name size\n     * @memberof $MapObject\n     * @instance\n     * @type {number}\n     */\n    size: {\n      [VALUE]: 0,\n      [WRITABLE]: true,\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      [VALUE]: function values() {\n        return new MapIt(this, KIND_VALUE);\n      },\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the entries property.\n *\n * @function symIt\n * @memberof module:collections-x.Map.prototype\n * @returns {object} A new Iterator object.\n */\ndefineProperty(MapImplementation.prototype, symIt, {\n  [VALUE]: MapImplementation.prototype.entries,\n});\n\n/*\n * Determine whether to use shim or native.\n */\n\nlet ExportMap = MapImplementation;\ntry {\n  /* eslint-disable-next-line compat/compat */\n  ExportMap = new Map() ? Map : MapImplementation;\n} catch (ignore) {\n  // empty\n}\n\nexport const MapConstructor = ExportMap;\n\nlet ExportSet = SetImplementation;\ntry {\n  /* eslint-disable-next-line compat/compat */\n  ExportSet = new Set() ? Set : SetImplementation;\n} catch (ignore) {\n  // empty\n}\n\nexport const SetConstructor = ExportSet;\n\nlet testMap;\n\nif (ExportMap !== MapImplementation) {\n  testMap = new ExportMap();\n\n  if (typeof testMap[SIZE] !== 'number' || testMap[SIZE] !== 0) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  } else {\n    const propsMap = ['has', 'set', 'clear', 'delete', 'forEach', 'values', 'entries', 'keys', symIt];\n\n    const failedMap = some(propsMap, (method) => {\n      return isFunction(testMap[method]) === false;\n    });\n\n    if (failedMap) {\n      /* istanbul ignore next */\n      ExportMap = MapImplementation;\n    }\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  // Safari 8, for example, doesn't accept an iterable.\n  let mapAcceptsArguments = false;\n  try {\n    mapAcceptsArguments = new ExportMap([[1, 2]]).get(1) === 2;\n  } catch (ignore) {\n    // empty\n  }\n\n  if (mapAcceptsArguments === false) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  testMap = new ExportMap();\n  const mapSupportsChaining = testMap.set(1, 2) === testMap;\n\n  if (mapSupportsChaining === false) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  // Chrome 38-42, node 0.11/0.12, iojs 1/2 also have a bug when the Map has a size > 4\n  testMap = new ExportMap([[1, 0], [2, 0], [3, 0], [4, 0]]);\n  testMap.set(-0, testMap);\n  const gets = testMap.get(0) === testMap && testMap.get(-0) === testMap;\n  const mapUsesSameValueZero = gets && testMap.has(0) && testMap.has(-0);\n\n  if (mapUsesSameValueZero === false) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  if (setPrototypeOf) {\n    const MyMap = function MyMap(arg) {\n      testMap = new ExportMap(arg);\n      setPrototypeOf(testMap, MyMap.prototype);\n\n      return testMap;\n    };\n\n    setPrototypeOf(MyMap, ExportMap);\n    MyMap.prototype = create(ExportMap.prototype, {constructor: {[VALUE]: MyMap}});\n\n    let mapSupportsSubclassing = false;\n    try {\n      testMap = new MyMap([]);\n      // Firefox 32 is ok with the instantiating the subclass but will\n      // throw when the map is used.\n      testMap.set(42, 42);\n      mapSupportsSubclassing = testMap instanceof MyMap;\n    } catch (ignore) {\n      // empty\n    }\n\n    if (mapSupportsSubclassing === false) {\n      /* istanbul ignore next */\n      ExportMap = MapImplementation;\n    }\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  let mapRequiresNew;\n  try {\n    /* eslint-disable-next-line babel/new-cap */\n    mapRequiresNew = !(ExportMap() instanceof ExportMap);\n  } catch (e) {\n    mapRequiresNew = e instanceof TypeError;\n  }\n\n  if (mapRequiresNew === false) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\nif (ExportMap !== MapImplementation) {\n  testMap = new ExportMap();\n  let mapIterationThrowsStopIterator;\n  try {\n    mapIterationThrowsStopIterator = testMap.keys()[NEXT]()[DONE] === false;\n  } catch (ignore) {\n    /* istanbul ignore next */\n    mapIterationThrowsStopIterator = true;\n  }\n\n  if (mapIterationThrowsStopIterator) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\n// Safari 8\nif (ExportMap !== MapImplementation && isFunction(new ExportMap().keys()[NEXT]) === false) {\n  /* istanbul ignore next */\n  ExportMap = MapImplementation;\n}\n\nif (hasRealSymbolIterator && ExportMap !== MapImplementation) {\n  const testMapProto = getPrototypeOf(new ExportMap().keys());\n  let hasBuggyMapIterator = true;\n\n  if (testMapProto) {\n    hasBuggyMapIterator = isFunction(testMapProto[symIt]) === false;\n  }\n\n  if (hasBuggyMapIterator) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  }\n}\n\nlet testSet;\n\nif (ExportSet !== SetImplementation) {\n  testSet = new ExportSet();\n\n  if (typeof testSet[SIZE] !== 'number' || testSet[SIZE] !== 0) {\n    /* istanbul ignore next */\n    ExportMap = MapImplementation;\n  } else {\n    const propsSet = ['has', 'add', 'clear', 'delete', 'forEach', 'values', 'entries', 'keys', symIt];\n\n    const failedSet = some(propsSet, function predicate(method) {\n      return isFunction(testSet[method]) === false;\n    });\n\n    if (failedSet) {\n      /* istanbul ignore next */\n      ExportSet = SetImplementation;\n    }\n  }\n}\n\nif (ExportSet !== SetImplementation) {\n  testSet = new ExportSet();\n  testSet.delete(0);\n  testSet.add(-0);\n  const setUsesSameValueZero = testSet.has(0) && testSet.has(-0);\n\n  if (setUsesSameValueZero === false) {\n    /* istanbul ignore next */\n    ExportSet = SetImplementation;\n  }\n}\n\nif (ExportSet !== SetImplementation) {\n  testSet = new ExportSet();\n  const setSupportsChaining = testSet.add(1) === testSet;\n\n  if (setSupportsChaining === false) {\n    /* istanbul ignore next */\n    ExportSet = SetImplementation;\n  }\n}\n\nif (ExportSet !== SetImplementation) {\n  if (setPrototypeOf) {\n    const MySet = function MySet(arg) {\n      testSet = new ExportSet(arg);\n      setPrototypeOf(testSet, MySet.prototype);\n\n      return testSet;\n    };\n\n    setPrototypeOf(MySet, ExportSet);\n    MySet.prototype = create(ExportSet.prototype, {constructor: {[VALUE]: MySet}});\n\n    let setSupportsSubclassing = false;\n    try {\n      testSet = new MySet([]);\n      testSet.add(42, 42);\n      setSupportsSubclassing = testSet instanceof MySet;\n    } catch (ignore) {\n      // empty\n    }\n\n    if (setSupportsSubclassing === false) {\n      /* istanbul ignore next */\n      ExportSet = SetImplementation;\n    }\n  }\n}\n\nif (ExportSet !== SetImplementation) {\n  let setRequiresNew;\n  try {\n    /* eslint-disable-next-line babel/new-cap */\n    setRequiresNew = !(ExportSet() instanceof ExportSet);\n  } catch (e) {\n    setRequiresNew = e instanceof TypeError;\n  }\n\n  if (setRequiresNew === false) {\n    /* istanbul ignore next */\n    ExportSet = SetImplementation;\n  }\n}\n\nif (ExportSet !== SetImplementation) {\n  testSet = new ExportSet();\n  let setIterationThrowsStopIterator;\n  try {\n    setIterationThrowsStopIterator = testSet.keys()[NEXT]()[DONE] === false;\n  } catch (ignore) {\n    /* istanbul ignore next */\n    setIterationThrowsStopIterator = true;\n  }\n\n  if (setIterationThrowsStopIterator) {\n    /* istanbul ignore next */\n    ExportSet = SetImplementation;\n  }\n}\n\n// Safari 8\nif (ExportSet !== SetImplementation && isFunction(new ExportSet().keys()[NEXT]) === false) {\n  /* istanbul ignore next */\n  ExportSet = SetImplementation;\n}\n\nif (hasRealSymbolIterator && ExportSet !== SetImplementation) {\n  const testSetProto = getPrototypeOf(new ExportSet().keys());\n  let hasBuggySetIterator = true;\n\n  if (testSetProto) {\n    hasBuggySetIterator = isFunction(testSetProto[symIt]) === false;\n  }\n\n  if (hasBuggySetIterator) {\n    /* istanbul ignore next */\n    ExportSet = SetImplementation;\n  }\n}\n\nconst hasCommon = function hasCommon(object) {\n  return (\n    isObjectLike(object) &&\n    isFunction(object[symIt]) &&\n    isBoolean(object[PROP_CHANGED]) &&\n    isObjectLike(object[PROP_ID]) &&\n    isArray(object[PROP_KEY]) &&\n    isArray(object[PROP_ORDER]) &&\n    typeof object[SIZE] === 'number'\n  );\n};\n\nexport const isMapImplementation = function isMapImplementation(object) {\n  return $isMap(object) || (hasCommon(object) && isArray(object[PROP_VALUE]));\n};\n\n/**\n * Determine if an `object` is a `Map`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Map`,\n *  else `false`.\n */\nexport const isMap = ExportMap === MapImplementation ? isMapImplementation : $isMap;\n\nexport const isSetImplementation = function isSetImplementation(object) {\n  return $isSet(object) || (hasCommon(object) && typeof object[PROP_VALUE] === 'undefined');\n};\n\n/**\n * Determine if an `object` is a `Set`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Set`,\n *  else `false`.\n */\nexport const isSet = ExportSet === SetImplementation ? isSetImplementation : $isSet;\n"]}